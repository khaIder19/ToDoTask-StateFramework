package com.core.model.impl.adjustable.dependent.constraint.api;

import com.core.model.api.State;
import com.core.model.TimeRange;
import com.core.model.impl.adjustable.dependent.constraint.ConstraintException;

/**
 * A Constraint defines the logic and establish the validity of a dependency relationship between an object and a set of a given State(s) entities.
 *<p></p>
 * The result of constraint has two forms : a range called "constraint range" and a condition called "constraint condition".
 * These two constraint forms will be generated by two main functions : the "range constraint function" and the "condition constraint function"
 *<p></p>
 * The "range constraint function" provides one or more ranges in which the dependent object parameters has to be restricted in.
 * The "condition constraint function" provides a more generic validity condition of the constraint represented,
 * on which the dependent object properties can be restricted on.
 *<p></p>
 * Both functions should have the same character in order to best represent the supposed Constraint logic.
 *<p></p>
 */
public interface Constraint extends BaseConstraint{

    /**
     * Returns a the "constraint range" in which a dependent object is restricted.
     * For a given set of State(s), this method provides one or more range(s) representing the constraint abstracted.
     *<p></p>
     * Note: the ranges returned will not overlap themselves, and will no be continuous : (range 1.end = range2.start).
     *<p></p>
     * @param states State set to evaluate.
     * @return array of time range intervals ordered by their "natural order".
     * @throws ConstraintException if the State set given is not supported by this Constraint implementation.
     */
    public TimeRange[] resolveConstraintRange(State[] states) throws ConstraintException;

}
